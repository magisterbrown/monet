from monart.datasets.mockds import MockDatases, MockImageDataset
import torch
import glob
from models.progressive_gan import ProgressiveGAN
from torch.utils.data import DataLoader

class Trainer:
    def __init__(self, pth_ds: str):
        self.ds = MockImageDataset(pth_ds, 12, 4)
        self.init_model()
        
    def init_model(self):
        self.ganmodel = ProgressiveGAN(useGPU=True,
                             storeAVG=True)

    def get_generator(self):
        return self.ganmodel.netG

    def train(self):
        dl = DataLoader(self.ds, batch_size=4, shuffle=True)
        for i in range(2):
            for i in range(1):
                self.ganmodel = self.train_one_epoch(dl, self.ganmodel)
            self.ganmodel.addScale(512)

    def train_one_epoch(self, dl, ganmodel):
        for key, data in enumerate(dl):
            ganmodel.optimizeParameters(data.to(torch.float32))

        return ganmodel
